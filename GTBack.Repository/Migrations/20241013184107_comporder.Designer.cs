// <auto-generated />
using System;
using GTBack.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GTBack.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241013184107_comporder")]
    partial class comporder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GTBack.Core.DTO.Shopping.GlobalProductModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("BrandId")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<string>("Images")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MainCategory")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NotDiscountedPrice")
                        .HasColumnType("text");

                    b.Property<string>("Price")
                        .HasColumnType("text");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("Quantity")
                        .HasColumnType("text");

                    b.Property<string>("SubCategory")
                        .HasColumnType("text");

                    b.Property<string>("TopCategory")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Variants")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GlobalProductModels");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Classroom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CoachId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Coach", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveCoachGuid")
                        .HasColumnType("text");

                    b.Property<string>("ActiveForgotLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveForgotLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InitialPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.QuestionImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("SubjectScheduleRelationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubjectScheduleRelationId");

                    b.ToTable("QuestionImage");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubLessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubLessonId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveForgotLink")
                        .HasColumnType("text");

                    b.Property<long?>("ClassroomId")
                        .HasColumnType("bigint");

                    b.Property<long>("CoachId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<bool?>("HavePermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CoachId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SubLessonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubLessonId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.SubjectScheduleRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("CorrectCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int?>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectScheduleRelations");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.SubLesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("SubLessons");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceBasket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EcommerceBasket");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceBasketProductRelation", b =>
                {
                    b.Property<long>("EcommerceBasketId")
                        .HasColumnType("bigint");

                    b.Property<long>("EcommerceVariantId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EcommerceBasketId", "EcommerceVariantId");

                    b.HasIndex("EcommerceVariantId");

                    b.ToTable("EcommerceBasketProductRelation");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceClient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveForgotLink")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long>("BasketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EcommerceCompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceCompanyId");

                    b.ToTable("EcommerceClient");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceClientFavoriteRelation", b =>
                {
                    b.Property<long>("EcommerceClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("EcommerceProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EcommerceClientId", "EcommerceProductId");

                    b.HasIndex("EcommerceProductId");

                    b.ToTable("EcommerceClientFavoriteRelation");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveredAndReturnPolicy")
                        .HasColumnType("text");

                    b.Property<string>("DistanceSellingContract")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailPassword")
                        .HasColumnType("text");

                    b.Property<string>("GeoCodeX")
                        .HasColumnType("text");

                    b.Property<string>("GeoCodeY")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IyzicoClientId")
                        .HasColumnType("text");

                    b.Property<string>("IyzicoSecretId")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text");

                    b.Property<string>("PrivacyPolicy")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text");

                    b.Property<int?>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("text");

                    b.Property<int>("ThemeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VergiNumber")
                        .HasColumnType("text");

                    b.Property<string>("WebAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EcommerceCompany");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveForgotLink")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EcommerceCompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceCompanyId");

                    b.ToTable("EcommerceEmployee");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<long>("EcommerceVariantId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceVariantId");

                    b.ToTable("EcommerceImage");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("EcommerceClientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EcommerceCompanyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IyzicoTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderGuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShippmentTrackingLink")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceClientId");

                    b.HasIndex("EcommerceCompanyId");

                    b.ToTable("EcommerceOrder");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Category1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category2")
                        .HasColumnType("text");

                    b.Property<string>("Category3")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EcommerceCompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("EcommerceEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceCompanyId");

                    b.HasIndex("EcommerceEmployeeId");

                    b.ToTable("EcommerceProduct");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("EcommerceClientId")
                        .HasColumnType("integer");

                    b.Property<long?>("EcommerceClientId1")
                        .HasColumnType("bigint");

                    b.Property<int?>("EcommerceEmployeeId")
                        .HasColumnType("integer");

                    b.Property<long?>("EcommerceEmployeeId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceClientId1");

                    b.HasIndex("EcommerceEmployeeId1");

                    b.ToTable("EcommerceRefreshToken");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EcommerceProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbImage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VariantIndicator")
                        .HasColumnType("text");

                    b.Property<string>("VariantName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceProductId");

                    b.ToTable("EcommerceVariant");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceVariantOrderRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EcommerceOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EcommerceProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("EcommerceVariantId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceOrderId");

                    b.HasIndex("EcommerceProductId");

                    b.HasIndex("EcommerceVariantId");

                    b.ToTable("EcommerceVariantOrderRelation");
                });

            modelBuilder.Entity("GTBack.Core.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("CoachId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EcommerceClientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EcommerceEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("customerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("EcommerceClientId");

                    b.HasIndex("EcommerceEmployeeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Restourant.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ShoppingUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingUserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MainCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<long>("ShoppingCompanyId")
                        .HasColumnType("bigint");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCompanyId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.ShoppingCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCompany");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.ShoppingOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("BasketJsonDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IyzicoTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderGuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ShoppingUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ShoppingUserId");

                    b.ToTable("ShoppingOrder");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.ShoppingUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActiveBasketId")
                        .HasColumnType("bigint");

                    b.Property<string>("ActiveForgotLink")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Favorites")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ShoppingCompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCompanyId");

                    b.ToTable("ShoppingUser");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Classroom", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.Coach", "Coach")
                        .WithMany("Classrooms")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Parent", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.Student", "Student")
                        .WithOne("Parent")
                        .HasForeignKey("GTBack.Core.Entities.Coach.Parent", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.QuestionImage", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.SubjectScheduleRelation", "SubjectScheduleRelation")
                        .WithMany("QuestionImage")
                        .HasForeignKey("SubjectScheduleRelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectScheduleRelation");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Schedule", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.Student", "Student")
                        .WithMany("Schedules")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTBack.Core.Entities.Coach.SubLesson", "SubLesson")
                        .WithMany("Schedules")
                        .HasForeignKey("SubLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubLesson");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Student", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId");

                    b.HasOne("GTBack.Core.Entities.Coach.Coach", "Coach")
                        .WithMany("Students")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Subject", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.SubLesson", "SubLesson")
                        .WithMany("Subjects")
                        .HasForeignKey("SubLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubLesson");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.SubjectScheduleRelation", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.Schedule", "Schedule")
                        .WithMany("SubjectScheduleRelations")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GTBack.Core.Entities.Coach.Subject", "Subject")
                        .WithMany("SubjectScheduleRelations")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Schedule");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.SubLesson", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.Lesson", "Lesson")
                        .WithMany("SubLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceBasketProductRelation", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceBasket", "Basket")
                        .WithMany("EcommerceBasketProductRelations")
                        .HasForeignKey("EcommerceBasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceVariant", "EcommerceVariant")
                        .WithMany("BasketProductRelations")
                        .HasForeignKey("EcommerceVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("EcommerceVariant");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceClient", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceCompany", "EcommerceCompany")
                        .WithMany("EcommerceClients")
                        .HasForeignKey("EcommerceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceCompany");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceClientFavoriteRelation", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceClient", "Client")
                        .WithMany("EcommerceClientFavoriteRelations")
                        .HasForeignKey("EcommerceClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceProduct", "Product")
                        .WithMany("ClientFavoriteRelations")
                        .HasForeignKey("EcommerceProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceEmployee", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceCompany", "EcommerceCompany")
                        .WithMany("EcommerceEmployees")
                        .HasForeignKey("EcommerceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceCompany");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceImage", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceVariant", "EcommerceVariant")
                        .WithMany("EcommerceImages")
                        .HasForeignKey("EcommerceVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceVariant");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceOrder", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceClient", "EcommerceClient")
                        .WithMany()
                        .HasForeignKey("EcommerceClientId");

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceCompany", "EcommerceCompany")
                        .WithMany("EcommerceOrder")
                        .HasForeignKey("EcommerceCompanyId");

                    b.Navigation("EcommerceClient");

                    b.Navigation("EcommerceCompany");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceProduct", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceCompany", "EcommerceCompany")
                        .WithMany()
                        .HasForeignKey("EcommerceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceEmployee", "EcommerceEmployee")
                        .WithMany("EcommerceProducts")
                        .HasForeignKey("EcommerceEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceCompany");

                    b.Navigation("EcommerceEmployee");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceRefreshToken", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceClient", "EcommerceClient")
                        .WithMany()
                        .HasForeignKey("EcommerceClientId1");

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceEmployee", "EcommerceEmployee")
                        .WithMany()
                        .HasForeignKey("EcommerceEmployeeId1");

                    b.Navigation("EcommerceClient");

                    b.Navigation("EcommerceEmployee");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceVariant", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceProduct", "EcommerceProduct")
                        .WithMany("Variants")
                        .HasForeignKey("EcommerceProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceProduct");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceVariantOrderRelation", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceOrder", "EcommerceOrder")
                        .WithMany("EcommerceVariantOrderRelation")
                        .HasForeignKey("EcommerceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceProduct", null)
                        .WithMany("EcommerceVariantOrderRelation")
                        .HasForeignKey("EcommerceProductId");

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceVariant", "EcommerceVariant")
                        .WithMany()
                        .HasForeignKey("EcommerceVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceOrder");

                    b.Navigation("EcommerceVariant");
                });

            modelBuilder.Entity("GTBack.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Coach.Coach", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("CoachId");

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceClient", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("EcommerceClientId");

                    b.HasOne("GTBack.Core.Entities.Ecommerce.EcommerceEmployee", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("EcommerceEmployeeId");

                    b.HasOne("GTBack.Core.Entities.Coach.Student", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("StudentId");

                    b.HasOne("GTBack.Core.Entities.Shopping.ShoppingUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.Address", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Shopping.ShoppingUser", "ShoppingUser")
                        .WithMany("Addresses")
                        .HasForeignKey("ShoppingUserId");

                    b.Navigation("ShoppingUser");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.Image", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Shopping.Product", "Product")
                        .WithMany("Image")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.Product", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Shopping.ShoppingCompany", "ShoppingCompany")
                        .WithMany("Product")
                        .HasForeignKey("ShoppingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingCompany");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.ShoppingOrder", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Shopping.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GTBack.Core.Entities.Shopping.ShoppingUser", "ShoppingUser")
                        .WithMany()
                        .HasForeignKey("ShoppingUserId");

                    b.Navigation("Address");

                    b.Navigation("ShoppingUser");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.ShoppingUser", b =>
                {
                    b.HasOne("GTBack.Core.Entities.Shopping.ShoppingCompany", "ShoppingCompany")
                        .WithMany("ShoppingUser")
                        .HasForeignKey("ShoppingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingCompany");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Classroom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Coach", b =>
                {
                    b.Navigation("Classrooms");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Lesson", b =>
                {
                    b.Navigation("SubLessons");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Schedule", b =>
                {
                    b.Navigation("SubjectScheduleRelations");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Student", b =>
                {
                    b.Navigation("Parent")
                        .IsRequired();

                    b.Navigation("RefreshTokens");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.Subject", b =>
                {
                    b.Navigation("SubjectScheduleRelations");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.SubjectScheduleRelation", b =>
                {
                    b.Navigation("QuestionImage");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Coach.SubLesson", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceBasket", b =>
                {
                    b.Navigation("EcommerceBasketProductRelations");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceClient", b =>
                {
                    b.Navigation("EcommerceClientFavoriteRelations");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceCompany", b =>
                {
                    b.Navigation("EcommerceClients");

                    b.Navigation("EcommerceEmployees");

                    b.Navigation("EcommerceOrder");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceEmployee", b =>
                {
                    b.Navigation("EcommerceProducts");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceOrder", b =>
                {
                    b.Navigation("EcommerceVariantOrderRelation");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceProduct", b =>
                {
                    b.Navigation("ClientFavoriteRelations");

                    b.Navigation("EcommerceVariantOrderRelation");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Ecommerce.EcommerceVariant", b =>
                {
                    b.Navigation("BasketProductRelations");

                    b.Navigation("EcommerceImages");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.Product", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.ShoppingCompany", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("ShoppingUser");
                });

            modelBuilder.Entity("GTBack.Core.Entities.Shopping.ShoppingUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
